package com.mapswithme.maps.widget.placepage

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import android.widget.TextView
import androidx.annotation.DrawableRes
import androidx.annotation.StringRes
import com.mapswithme.maps.MwmApplication
import com.mapswithme.maps.R
import com.mapswithme.maps.routing.RoutingController
import com.mapswithme.maps.widget.placepage.PlacePageButtons.PlacePageButton.ImageResources
import com.mapswithme.util.BottomSheetHelper
import com.mapswithme.util.BottomSheetHelper.tint
import com.mapswithme.util.ThemeUtils.getResource
import com.mapswithme.util.UiUtils
import java.util.*

class PlacePageButtons internal constructor(
    private val mPlacePage: PlacePageView,
    private val mFrame: ViewGroup,
    private val mItemListener: ItemListener
) {
    private val mMaxButtons: Int
    private var mPrevItems: List<PlacePageButton>? = null

    interface PlacePageButton {
        @get:StringRes
        val title: Int

        val icon: ImageResources
        val type: ButtonType
        @get:DrawableRes
        val backgroundResource: Int

        open class ImageResources @JvmOverloads constructor(
            @DrawableRes open val enabledStateResId: Int, @DrawableRes open val disabledStateResId: Int = enabledStateResId
        ) {

            open class Stub : ImageResources(UiUtils.NO_ID) {

                override val enabledStateResId: Int
                    get() = throw UnsupportedOperationException("Not supported here")

                override val disabledStateResId: Int
                    get() = throw UnsupportedOperationException("Not supported here")
            }

        }
    }

    enum class ButtonType {
        // ---------------------------------------------------------------------------------------------
// Warning: the following code is autogenerated.
// Do NOT change it manually.
// %PartnersExtender.ButtonType
        PARTNER1,
        PARTNER2, PARTNER3, PARTNER18, PARTNER19, PARTNER20,  // /%PartnersExtender.ButtonType
        // End of autogenerated code.
// ---------------------------------------------------------------------------------------------
        BOOKING,
        BOOKING_SEARCH, OPENTABLE, BACK, BOOKMARK, ROUTE_FROM, ROUTE_TO, ROUTE_ADD, ROUTE_REMOVE, ROUTE_AVOID_TOLL, ROUTE_AVOID_FERRY, ROUTE_AVOID_UNPAVED, SHARE, MORE, CALL
    }

    internal enum class PartnerItem(
        // /%PartnersExtender.PartnerItem
// End of autogenerated code.
// ---------------------------------------------------------------------------------------------
        val index: Int, @field:StringRes @get:StringRes
        @param:StringRes override val title: Int, override val icon: ImageResources,
        @field:DrawableRes @get:DrawableRes
        @param:DrawableRes override val backgroundResource: Int, override val type: ButtonType
    ) : PlacePageButton {
        // ---------------------------------------------------------------------------------------------
// Warning: the following code is autogenerated.
// Do NOT change it manually.
// %PartnersExtender.PartnerItem
        PARTNER1(
            1,
            R.string.sponsored_partner1_action,
            ImageResources(R.drawable.ic_24px_logo_partner1),
            R.drawable.button_partner1,
            ButtonType.PARTNER1
        ),
        PARTNER2(
            2,
            R.string.sponsored_partner2_action,
            ImageResources(R.drawable.ic_24px_logo_partner2),
            R.drawable.button_partner2,
            ButtonType.PARTNER2
        ),
        PARTNER3(
            3,
            R.string.sponsored_partner3_action,
            ImageResources(R.drawable.ic_24px_logo_partner3),
            R.drawable.button_partner3,
            ButtonType.PARTNER3
        ),
        PARTNER18(
            18,
            R.string.sponsored_partner18_action,
            ImageResources(R.drawable.ic_24px_logo_partner18),
            R.drawable.button_partner18,
            ButtonType.PARTNER18
        ),
        PARTNER19(
            19,
            R.string.sponsored_partner19_action,
            ImageResources(R.drawable.ic_24px_logo_partner19),
            R.drawable.button_partner19,
            ButtonType.PARTNER19
        ),
        PARTNER20(
            20,
            R.string.sponsored_partner20_action,
            ImageResources(R.drawable.ic_24px_logo_partner20),
            R.drawable.button_partner20,
            ButtonType.PARTNER20
        );

    }

    internal enum class Item(
        @field:StringRes @get:StringRes
        @param:StringRes override val title: Int, override val icon: ImageResources,
        override val type: ButtonType
    ) : PlacePageButton {
        BOOKING(
            R.string.book_button,
            ImageResources(R.drawable.ic_booking),
            ButtonType.BOOKING
        ) {

            override val backgroundResource: Int
                get() = R.drawable.button_booking
        },
        BOOKING_SEARCH(
            R.string.booking_search,
            ImageResources(R.drawable.ic_menu_search),
            ButtonType.BOOKING_SEARCH
        ) {
            override val backgroundResource: Int
                get() = R.drawable.button_booking
        },
        OPENTABLE(
            R.string.book_button,
            ImageResources(R.drawable.ic_opentable),
            ButtonType.OPENTABLE
        ) {
            override val backgroundResource: Int
                get() = R.drawable.button_opentable
        },
        BACK(
            R.string.back,
            object :
                ImageResources.Stub() {

                override val enabledStateResId: Int
                    get() = getResource(
                        MwmApplication.get(),
                        android.R.attr.homeAsUpIndicator
                    )
            },
            ButtonType.BACK
        ),
        BOOKMARK(
            R.string.bookmark,
            ImageResources(R.drawable.ic_bookmarks_off),
            ButtonType.BOOKMARK
        ),
        ROUTE_FROM(
            R.string.p2p_from_here,
            ImageResources(R.drawable.ic_route_from),
            ButtonType.ROUTE_FROM
        ),
        ROUTE_TO(
            R.string.p2p_to_here,
            ImageResources(R.drawable.ic_route_to),
            ButtonType.ROUTE_TO
        ),
        ROUTE_ADD(
            R.string.placepage_add_stop,
            ImageResources(R.drawable.ic_route_via),
            ButtonType.ROUTE_ADD
        ),
        ROUTE_REMOVE(
            R.string.placepage_remove_stop,
            ImageResources(R.drawable.ic_route_remove),
            ButtonType.ROUTE_REMOVE
        ),
        ROUTE_AVOID_TOLL(
            R.string.avoid_toll_roads_placepage,
            ImageResources(R.drawable.ic_avoid_tolls),
            ButtonType.ROUTE_AVOID_TOLL
        ),
        ROUTE_AVOID_UNPAVED(
            R.string.avoid_unpaved_roads_placepage,
            ImageResources(R.drawable.ic_avoid_unpaved),
            ButtonType.ROUTE_AVOID_UNPAVED
        ),
        ROUTE_AVOID_FERRY(
            R.string.avoid_ferry_crossing_placepage,
            ImageResources(R.drawable.ic_avoid_ferry),
            ButtonType.ROUTE_AVOID_FERRY
        ),
        SHARE(
            R.string.share,
            ImageResources(R.drawable.ic_share),
            ButtonType.SHARE
        ),  // Must not be used outside
        MORE(
            R.string.placepage_more_button,
            ImageResources(R.drawable.bs_ic_more),
            ButtonType.MORE
        ),
        CALL(
            R.string.placepage_call_button,
            ImageResources(R.drawable.ic_place_page_phone),
            ButtonType.CALL
        );

        @get:DrawableRes
        override val backgroundResource: Int
            get() {
                throw UnsupportedOperationException("Not supported!")
            }

    }

    internal interface ItemListener {
        fun onPrepareVisibleView(
            item: PlacePageButton, frame: View,
            icon: ImageView, title: TextView
        )

        fun onItemClick(item: PlacePageButton?)
    }

    private fun collectButtons(items: List<PlacePageButton>): List<PlacePageButton> {
        val res: MutableList<PlacePageButton> =
            ArrayList(items)
        if (res.size > mMaxButtons) res.add(
            mMaxButtons - 1,
            Item.MORE
        )
        // Swap ROUTE_FROM and ROUTE_TO if the latter one was pressed out to bottomsheet
        var from =
            res.indexOf(Item.ROUTE_FROM)
        if (from > -1) {
            val addStop =
                res.indexOf(Item.ROUTE_ADD)
            var to =
                res.indexOf(Item.ROUTE_TO)
            if (to > from && to >= mMaxButtons || to > from && addStop >= mMaxButtons) Collections.swap(
                res,
                from,
                to
            )
            if (addStop >= mMaxButtons) {
                from =
                    res.indexOf(Item.ROUTE_FROM)
                if (addStop > from) Collections.swap(res, from, addStop)
            }
            preserveRoutingButtons(
                res,
                Item.CALL
            )
            preserveRoutingButtons(
                res,
                Item.BOOKING
            )
            preserveRoutingButtons(
                res,
                Item.BOOKING_SEARCH
            )
            from =
                res.indexOf(Item.ROUTE_FROM)
            to = res.indexOf(Item.ROUTE_TO)
            if (from < mMaxButtons && from > to) Collections.swap(res, to, from)
        }
        return res
    }

    private fun preserveRoutingButtons(
        items: MutableList<PlacePageButton>,
        itemToShift: Item
    ) {
        if (!RoutingController.get().isNavigating && !RoutingController.get().isPlanning) return
        val pos = items.indexOf(itemToShift)
        if (pos > -1) {
            items.removeAt(pos)
            items.add(mMaxButtons, itemToShift)
            val to =
                items.indexOf(Item.ROUTE_TO)
            if (items.indexOf(Item.ROUTE_ADD) > -1) {
                items.remove(Item.ROUTE_ADD)
                items.remove(Item.ROUTE_FROM)
                items.add(
                    to + 1,
                    Item.ROUTE_ADD
                )
                items.add(
                    mMaxButtons,
                    Item.ROUTE_FROM
                )
            } else {
                items.remove(Item.ROUTE_FROM)
                items.add(
                    to + 1,
                    Item.ROUTE_FROM
                )
            }
        }
    }

    private fun showPopup(buttons: List<PlacePageButton>) {
        val bs =
            BottomSheetHelper.Builder(mPlacePage.activity)
        for (i in mMaxButtons until buttons.size) {
            val bsItem = buttons[i]
            val iconRes = bsItem.icon.enabledStateResId
            bs.sheet(i, iconRes, bsItem.title)
        }
        val bottomSheet =
            bs.listener { item ->
                mItemListener.onItemClick(buttons[item.itemId])
                true
            }.build()
        tint(bottomSheet)
        bottomSheet.show()
    }

    private fun createButton(
        items: List<PlacePageButton>,
        current: PlacePageButton
    ): View {
        val inflater = LayoutInflater.from(mPlacePage.context)
        val parent = inflater.inflate(R.layout.place_page_button, mFrame, false)
        val icon =
            parent.findViewById<View>(R.id.icon) as ImageView
        val title = parent.findViewById<View>(R.id.title) as TextView
        title.setText(current.title)
        icon.setImageResource(current.icon.enabledStateResId)
        mItemListener.onPrepareVisibleView(current, parent, icon, title)
        parent.setOnClickListener(ShowPopupClickListener(current, items))
        return parent
    }

    fun setItems(items: List<PlacePageButton>) {
        val buttons: List<PlacePageButton> = collectButtons(items)
        if (buttons == mPrevItems) return
        mFrame.removeAllViews()
        val count = Math.min(buttons.size, mMaxButtons)
        for (i in 0 until count) mFrame.addView(createButton(buttons, buttons[i]))
        mPrevItems = buttons
    }

    private inner class ShowPopupClickListener(
        private val mCurrent: PlacePageButton,
        private val mItems: List<PlacePageButton>
    ) : View.OnClickListener {
        override fun onClick(v: View) {
            if (mCurrent === Item.MORE) showPopup(
                mItems
            ) else mItemListener.onItemClick(mCurrent)
        }

    }

    companion object {
        private val PARTNERS_ITEMS: Map<Int, PartnerItem> =
            object : HashMap<Int, PartnerItem>() {
                init { // ---------------------------------------------------------------------------------------------
// Warning: the following code is autogenerated.
// Do NOT change it manually.
// %PartnersExtender.PartnerItemMap
                    put(PartnerItem.PARTNER1.index, PartnerItem.PARTNER1)
                    put(PartnerItem.PARTNER2.index, PartnerItem.PARTNER2)
                    put(PartnerItem.PARTNER3.index, PartnerItem.PARTNER3)
                    put(PartnerItem.PARTNER18.index, PartnerItem.PARTNER18)
                    put(PartnerItem.PARTNER19.index, PartnerItem.PARTNER19)
                    put(PartnerItem.PARTNER20.index, PartnerItem.PARTNER20)
                    // /%PartnersExtender.PartnerItemMap
// End of autogenerated code.
// ---------------------------------------------------------------------------------------------
                }
            }

        fun getPartnerItem(partnerIndex: Int): PlacePageButton {
            return PARTNERS_ITEMS[partnerIndex]
                ?: throw AssertionError("Wrong partner index: $partnerIndex")
        }
    }

    init {
        mMaxButtons = mPlacePage.context.resources.getInteger(R.integer.pp_buttons_max)
    }
}